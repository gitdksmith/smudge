# P0F FINGERPRINT DATABASE SIGNATURES #
#######################################
README: https://github.com/ValdikSS/p0f-mtu

sig = ver:ittl:olen:mss:wsize,scale:olayout:quirks:pclass

ver = ipv4 or ipv6 version
olen = length of IPv4 options or IPv6 extension headers
olayout = TCP options layout
quirks = other properties observed in IP or TCP header, like "do not fragment", or "PUSH flag used"
pclass = payload size classification: '0' for zero, '+' nonzero, '*' for any.

Attemts:
1. raw_sig  = 4:64+0:0:1460:mss*20,0:mss,sok,ts:df,id+,bad:+   --> didnt have tcp data_offset updating
2. raw_sig  = 4:64+0:0:1460:mss*20,7:mss,sok,ts,nop,ws:df,id+,ts1-:0  --> blank tsval
3. raw_sig  = 4:64+0:0:1460:mss*20,7:mss,sok,ts,nop,ws:df,id+:0  ----> winner!
Timestamps: TSval 30071228, TSecr 0
Got it to guess linux. Had to hard code that tsval in so I still have that to figure out.

Some sigs from p0f.fp:

label = s:win:Windows:7 or 8
sig   = *:128:0:*:8192,0:mss,nop,nop,sok:df,id+:0
sig   = *:128:0:*:8192,2:mss,nop,ws,nop,nop,sok:df,id+:0
sig   = *:128:0:*:8192,8:mss,nop,ws,nop,nop,sok:df,id+:0
sig   = *:128:0:*:8192,2:mss,nop,ws,sok,ts:df,id+:0

label = s:unix:Linux:3.11 and newer
sig   = *:64:0:*:mss*20,10:mss,sok,ts,nop,ws:df,id+:0
sig   = *:64:0:*:mss*20,7:mss,sok,ts,nop,ws:df,id+:0

label = s:unix:Linux:3.1-3.10
sig   = *:64:0:*:mss*10,4:mss,sok,ts,nop,ws:df,id+:0
sig   = *:64:0:*:mss*10,5:mss,sok,ts,nop,ws:df,id+:0
sig   = *:64:0:*:mss*10,6:mss,sok,ts,nop,ws:df,id+:0
sig   = *:64:0:*:mss*10,7:mss,sok,ts,nop,ws:df,id+:0



# WINDOWS 10 FINGERPRINT #
##########################

.-[ 10.0.0.7/59164 -> 10.0.0.8/1234 (syn) ]-
|
| client   = 10.0.0.7/59164
| os       = Windows 7 or 8
| dist     = 0
| params   = none
| raw_sig  = 4:128+0:0:1460:8192,8:mss,nop,ws,nop,nop,sok:df,id+:0
|
`----

.-[ 10.0.0.7/59164 -> 10.0.0.8/1234 (mtu) ]-
|
| client   = 10.0.0.7/59164
| link     = Ethernet or modem
| raw_mtu  = 1500
|
`----



# Smudged WINDOWS 10 FINGERPRINT #
##################################
Modifications:
	Param     From     To
	TTL       128      64
	MSS       1460     576

.-[ 10.0.0.7/59034 -> 10.0.0.8/1234 (syn) ]-
|
| client   = 10.0.0.7/59034
| os       = Windows 7 or 8
| dist     = 0
| params   = fuzzy
| raw_sig  = 4:64+0:0:576:8192,8:mss,nop,ws,nop,nop,sok:df,id+:0
|
`----

.-[ 10.0.0.7/59034 -> 10.0.0.8/1234 (mtu) ]-
|
| client   = 10.0.0.7/59034
| link     = ???
| raw_mtu  = 616
|
`----



# KALI FINGERPRINT#
###################

Kali VM
# uname -a
Linux k 4.3.0-kali1-amd64 #1 SMP Debian 4.3.3-5kali4 (2016-01-13) x86_64 GNU/Linux

p0f output:

-[ 10.0.0.8/54560 -> 10.0.0.14/1234 (syn) ]-
|
| client   = 10.0.0.8/54560
| os       = Linux 3.11 and newer
| dist     = 0
| params   = none
| raw_sig  = 4:64+0:0:1460:mss*20,7:mss,sok,ts,nop,ws:df,id+:0
|
`----

.-[ 10.0.0.8/54560 -> 10.0.0.14/1234 (mtu) ]-
|
| client   = 10.0.0.8/54560
| link     = Ethernet or modem
| raw_mtu  = 1500
|
`----

.-[ 10.0.0.8/54560 -> 10.0.0.14/1234 (uptime) ]-
|
| client   = 10.0.0.8/54560
| uptime   = 1 days 0 hrs 0 min (modulo 198 days)
| raw_freq = 249.93 Hz
|
`----


# Note on TCP timestamp option #
################################
I cannot figure out how it is generataed. RFC 1323 states that it is to be generated with a
"timestamp clock". I cannot find what linux or windows use to generate the timestamp, or even
what format it is in. Is it epoch seconds? Seconds since reboot? Both would seem to be good ideas, 
but I tested a value from looking at a tsval in wireshark, and it does not seem to fit either. 

Wireshark: linux syn packet
Timestamps: TSval 25397954, TSecr 0
    Kind: Time Stamp Option (8)
    Length: 10
    Timestamp value: 25397954
    Timestamp echo reply: 0

https://www.ietf.org/rfc/rfc1323.txt

Going to fill this with just 0's for now, maybe it will just look like a malformed option.





# Whats available via PyDivert to modify in packets #
#####################################################

Packet({'direction': <Direction.OUTBOUND: 0>,
 'dst_addr': '10.0.0.25',
 'dst_port': 1234,
 'icmpv4': None,
 'icmpv6': None,
 'interface': (21L, 0L),
 'ipv4': {'cksum': 45575,
          'df': True,
          'diff_serv': 0,
          'dscp': 0,
          'dst_addr': '10.0.0.25',
          'ecn': 0,
          'evil': False,
          'flags': 2,
          'frag_offset': 0,
          'hdr_len': 5,
          'header_len': 20,
          'ident': 29853,
          'mf': False,
          'packet_len': 52,
          'raw': <memory at 0x0000000003DECAF8>,
          'reserved': False,
          'src_addr': '10.0.0.7',
          'tos': 0,
          'ttl': 64},
 'ipv6': None,
 'is_inbound': False,
 'is_loopback': False,
 'is_outbound': True,
 'payload': '',
 'raw': <memory at 0x0000000003DECB88>,
 'src_addr': '10.0.0.7',
 'src_port': 51248,
 'tcp': {'ack': False,
         'ack_num': 0,
         'cksum': 26893,
         'control_bits': 2,
         'cwr': False,
         'data_offset': 8,
         'dst_port': 1234,
         'ece': False,
         'fin': False,
         'header_len': 32,
         'ns': False,
         'payload': '',
         'psh': False,
         'raw': <memory at 0x0000000003DECC18>,
         'reserved': 0,
         'rst': False,
         'seq_num': 3250407063L,
         'src_port': 51248,
         'syn': True,
         'urg': False,
         'urg_ptr': 0,
         'window_size': 8192},
 'udp': None})

This is a syn packet, looking for options...
..options: <memory at 0x0000000003A74558> (memory view object)
.. toBytes: 020405b40103030801010402
.. toList: [2, 4, 5, 180, 1, 3, 3, 8, 1, 1, 4, 2]
.. is this read only? False
packet raw 450000344959400040069d5c0a0000070a000008ec0e04d203a86c760000000080022000da020000020405b40103030801010402
ip raw 450000344959400040069d5c0a0000070a000008ec0e04d203a86c760000000080022000da020000020405b40103030801010402
tcp raw ec0e04d203a86c760000000080022000da020000020405b40103030801010402
